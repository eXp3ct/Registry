// <auto-generated />
using System;
using Expect.Registry.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Expect.Registry.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.AddresseIncomingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddresseId")
                        .HasColumnType("integer");

                    b.Property<int>("IncomingDocumentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddresseId");

                    b.HasIndex("IncomingDocumentId");

                    b.ToTable("AddresseIncomingDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddresseId = 1,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 2,
                            AddresseId = 2,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 3,
                            AddresseId = 1,
                            IncomingDocumentId = 4
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.CameFromIncomingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CameFromId")
                        .HasColumnType("integer");

                    b.Property<int>("IncomingDocumentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CameFromId");

                    b.HasIndex("IncomingDocumentId");

                    b.ToTable("CameFromIncomingDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CameFromId = 1,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 2,
                            CameFromId = 1,
                            IncomingDocumentId = 4
                        },
                        new
                        {
                            Id = 3,
                            CameFromId = 2,
                            IncomingDocumentId = 4
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.CounterPartyIncomingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CounterPartyId")
                        .HasColumnType("integer");

                    b.Property<int>("IncomingDocumentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CounterPartyId");

                    b.HasIndex("IncomingDocumentId");

                    b.ToTable("CounterPartyIncomingDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CounterPartyId = 1,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 2,
                            CounterPartyId = 2,
                            IncomingDocumentId = 4
                        },
                        new
                        {
                            Id = 3,
                            CounterPartyId = 1,
                            IncomingDocumentId = 4
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.DeliveryMethodIncomingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("IncomingDocumentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("IncomingDocumentId");

                    b.ToTable("DeliveryMethodIncomingDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryMethodId = 1,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 2,
                            DeliveryMethodId = 2,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 3,
                            DeliveryMethodId = 3,
                            IncomingDocumentId = 3
                        },
                        new
                        {
                            Id = 4,
                            DeliveryMethodId = 2,
                            IncomingDocumentId = 4
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.DocumentKindBasicDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BasicDocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentKindId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BasicDocumentId");

                    b.HasIndex("DocumentKindId");

                    b.ToTable("DocumentKindBasicDocuments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicDocumentId = 1,
                            DocumentKindId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasicDocumentId = 2,
                            DocumentKindId = 1
                        },
                        new
                        {
                            Id = 3,
                            BasicDocumentId = 3,
                            DocumentKindId = 2
                        },
                        new
                        {
                            Id = 4,
                            BasicDocumentId = 4,
                            DocumentKindId = 2
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.Addressee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Addressees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Veselov Roman"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "John Doe"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.BasicDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Discriminator")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents", (string)null);

                    b.HasDiscriminator<Guid>("Discriminator").HasValue(new Guid("06398d2c-5b15-4d14-a44a-e1cdbc2b4d02"));

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discriminator = new Guid("00000000-0000-0000-0000-000000000000"),
                            DocumentNumber = "BasicDocNumber1",
                            Name = "BasicDocName1",
                            Subject = "BasicDocSubject1"
                        },
                        new
                        {
                            Id = 2,
                            Discriminator = new Guid("00000000-0000-0000-0000-000000000000"),
                            DocumentNumber = "BasicDocNumber2",
                            Name = "BasicDocName1",
                            Subject = "BasicDocSubject1"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.CameFrom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CameFrom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Organization 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Organization 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Organization 3"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.CounterParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CounterParties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Organization 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Organization 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Organization 3"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mail"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EMDS"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.DocumentKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentKinds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Incoming"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.IncomingDocument", b =>
                {
                    b.HasBaseType("Expect.Registry.Domain.Models.BasicDocument");

                    b.HasDiscriminator().HasValue(new Guid("d12dfde5-3397-471a-a07c-628dcafb65a9"));

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Discriminator = new Guid("00000000-0000-0000-0000-000000000000"),
                            DocumentNumber = "IncomingDocNumber1",
                            Name = "IncomingDocName1",
                            Subject = "IncomingDocSubject1"
                        },
                        new
                        {
                            Id = 4,
                            Discriminator = new Guid("00000000-0000-0000-0000-000000000000"),
                            DocumentNumber = "IncomingDocNumber2",
                            Name = "IncomingDocName2",
                            Subject = "IncomingDocSubject2"
                        });
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.AddresseIncomingDocument", b =>
                {
                    b.HasOne("Expect.Registry.Domain.Models.Addressee", "Addressee")
                        .WithMany("JoinIncomingDocuments")
                        .HasForeignKey("AddresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Expect.Registry.Domain.Models.IncomingDocument", "IncomingDocument")
                        .WithMany("Addressee")
                        .HasForeignKey("IncomingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addressee");

                    b.Navigation("IncomingDocument");
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.CameFromIncomingDocument", b =>
                {
                    b.HasOne("Expect.Registry.Domain.Models.CameFrom", "CameFrom")
                        .WithMany("JoinIncomingDocument")
                        .HasForeignKey("CameFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Expect.Registry.Domain.Models.IncomingDocument", "IncomingDocument")
                        .WithMany("CameFrom")
                        .HasForeignKey("IncomingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CameFrom");

                    b.Navigation("IncomingDocument");
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.CounterPartyIncomingDocument", b =>
                {
                    b.HasOne("Expect.Registry.Domain.Models.CounterParty", "CounterParty")
                        .WithMany("JoinIncomingDocuments")
                        .HasForeignKey("CounterPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Expect.Registry.Domain.Models.IncomingDocument", "IncomingDocument")
                        .WithMany("CounterParty")
                        .HasForeignKey("IncomingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CounterParty");

                    b.Navigation("IncomingDocument");
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.DeliveryMethodIncomingDocument", b =>
                {
                    b.HasOne("Expect.Registry.Domain.Models.DeliveryMethod", "DeliveryMethod")
                        .WithMany("JoinIncomingDocuments")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Expect.Registry.Domain.Models.IncomingDocument", "IncomingDocument")
                        .WithMany("DeliveryMethod")
                        .HasForeignKey("IncomingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMethod");

                    b.Navigation("IncomingDocument");
                });

            modelBuilder.Entity("Expect.Registry.Domain.JoinEntities.DocumentKindBasicDocument", b =>
                {
                    b.HasOne("Expect.Registry.Domain.Models.BasicDocument", "BasicDocument")
                        .WithMany("JoinDocumentKind")
                        .HasForeignKey("BasicDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Expect.Registry.Domain.Models.DocumentKind", "DocumentKind")
                        .WithMany("JoinBasicDocuments")
                        .HasForeignKey("DocumentKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicDocument");

                    b.Navigation("DocumentKind");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.Addressee", b =>
                {
                    b.Navigation("JoinIncomingDocuments");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.BasicDocument", b =>
                {
                    b.Navigation("JoinDocumentKind");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.CameFrom", b =>
                {
                    b.Navigation("JoinIncomingDocument");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.CounterParty", b =>
                {
                    b.Navigation("JoinIncomingDocuments");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.DeliveryMethod", b =>
                {
                    b.Navigation("JoinIncomingDocuments");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.DocumentKind", b =>
                {
                    b.Navigation("JoinBasicDocuments");
                });

            modelBuilder.Entity("Expect.Registry.Domain.Models.IncomingDocument", b =>
                {
                    b.Navigation("Addressee");

                    b.Navigation("CameFrom");

                    b.Navigation("CounterParty");

                    b.Navigation("DeliveryMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
